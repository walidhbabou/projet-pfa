---
- name: Configuration du serveur EC2 pour Jenkins
  hosts: servers
  become: yes

  vars:
    jenkins_version: "2.426"  # Version spécifique de Jenkins pour stabilité
    docker_ce_version: "24.0"  # Version spécifique de Docker CE

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted

  tasks:
    - name: Installer les dépendances système
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    # Vérification de la version de CentOS
    - name: Debug distribution version
      debug:
        var: ansible_distribution_major_version

    - name: Ajouter le repository Docker
      yum_repository:
        name: docker-ce
        description: Docker CE Stable
        baseurl: https://download.docker.com/linux/centos/7/x86_64/stable
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes

    - name: Installer Docker
      yum:
        name:
          - docker-ce-{{ docker_ce_version }}
          - docker-ce-cli-{{ docker_ce_version }}
          - containerd.io
        state: present
      notify: Restart Docker

    - name: Activer et démarrer Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Installer Java (nécessaire pour Jenkins)
      yum:
        name: java-17-amazon-corretto-devel
        state: present

    - name: Ajouter l'utilisateur courant au groupe docker
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Ajouter le repo Jenkins
      rpm_key:
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        state: present

    - name: Configurer le repository Jenkins
      yum_repository:
        name: jenkins
        description: Jenkins repo
        baseurl: https://pkg.jenkins.io/redhat-stable
        gpgcheck: yes
        gpgkey: https://pkg.jenkins.io/redhat-stable/jenkins.io.key

    - name: Installer Jenkins
      yum:
        name: "jenkins-{{ jenkins_version }}"
        state: present
        disable_gpg_check: no

    - name: Démarrer Jenkins
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Afficher le mot de passe admin initial
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      changed_when: false

    - name: Afficher le mot de passe Jenkins
      debug:
        msg: "Mot de passe admin Jenkins initial: {{ jenkins_password.stdout }}"

- name: Configuration du nœud master Kubernetes
  hosts: master
  become: yes

  vars:
    k8s_version: "1.29.2"  # Version spécifique pour éviter les problèmes
    pod_network_cidr: "10.244.0.0/16"

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted
    - name: Restart kubelet
      service:
        name: kubelet
        state: restarted

  tasks:
    - name: Mettre à jour le cache apt
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Installer les dépendances
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present

    - name: Ajouter la clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le repository Docker
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce

    - name: Installer Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      notify: Restart Docker

    - name: Configurer Docker pour systemd
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }

    - name: Activer et démarrer Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Désactiver swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      ignore_errors: yes

    - name: Ajouter la clé GPG Kubernetes
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0:2] | join('.') }}/deb/Release.key
        state: present

    - name: Ajouter le repository Kubernetes
      apt_repository:
        repo: "deb [arch=amd64] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0:2] | join('.') }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Installer les packages Kubernetes
      apt:
        name:
          - kubelet={{ k8s_version }}-*
          - kubeadm={{ k8s_version }}-*
          - kubectl={{ k8s_version }}-*
        state: present
        allow_downgrades: yes

    - name: Initialiser le cluster Kubernetes
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }} --ignore-preflight-errors=all
      when: inventory_hostname == groups['master'][0]

    - name: Configurer kubectl pour l'utilisateur root
      become: false
      command: mkdir -p /root/.kube && cp /etc/kubernetes/admin.conf /root/.kube/config
      when: inventory_hostname == groups['master'][0]

    - name: Installer le réseau Pod (Flannel)
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      when: inventory_hostname == groups['master'][0]

    - name: Générer la commande join pour les workers
      command: kubeadm token create --print-join-command
      register: join_command
      when: inventory_hostname == groups['master'][0]

    - name: Afficher la commande join
      debug:
        msg: "Commande pour joindre les workers: {{ join_command.stdout }}"
      when: inventory_hostname == groups['master'][0]

- name: Configuration des nœuds worker Kubernetes
  hosts: worker
  become: yes

  vars:
    k8s_version: "1.29.2"

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted
    - name: Restart kubelet
      service:
        name: kubelet
        state: restarted

  tasks:
    - name: Mettre à jour le cache apt
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Installer les dépendances
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Ajouter la clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le repository Docker
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce

    - name: Installer Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      notify: Restart Docker

    - name: Configurer Docker pour systemd
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }

    - name: Activer et démarrer Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Désactiver swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      ignore_errors: yes

    - name: Ajouter la clé GPG Kubernetes
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0:2] | join('.') }}/deb/Release.key
        state: present

    - name: Ajouter le repository Kubernetes
      apt_repository:
        repo: "deb [arch=amd64] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0:2] | join('.') }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Installer les packages Kubernetes
      apt:
        name:
          - kubelet={{ k8s_version }}-*
          - kubeadm={{ k8s_version }}-*
        state: present
        allow_downgrades: yes

    - name: Joindre le cluster Kubernetes
      command: "{{ hostvars[groups['master'][0]]['join_command']['stdout'] }}"
      when: inventory_hostname in groups['worker']